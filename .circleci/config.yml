# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1


orbs:
  win: circleci/windows@2.2.0


# the set up in which the ubuntu jobs will run:
executors:
  ubuntu-python37:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo


commands:

  ubuntu_restore_all:
    description: "Restores virtual env with full install from cache, and update dependencies if need be."
    steps:
      - checkout

      - restore_cache:
          name: "[all] Restore cache"
          keys:
          - v5-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/main.txt"}}-{{ checksum "requirements/bench.txt"}}
          # fallback to installing main requirements
          - v5-dependencies-main-{{ checksum "requirements/main.txt"}}

      - run:
          name: "[all] Install dependencies"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -e .[all]
            # master numpy-stubs adds a lot of messy warnings :s
            pip install git+https://github.com/numpy/numpy-stubs@2c8d8f26adb1eef54571ccc85ef8ad4f2fb90c4c


jobs:
  install:
    executor: ubuntu-python37

    steps:
      - checkout

      # Download and cache dependencies for "main"
      - restore_cache:
          name: "[no-extra] Restore cache"
          keys:
          - v5-dependencies-main-{{ checksum "requirements/main.txt"}}
          # fallback to using the latest cache if no exact match is found

      - run:
          name: "[no-extra] Install dependencies"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -e .

      - run:
          name: "[no-extra] Print installation"
          when: always
          command: |
            if [[ -z "$CIRCLE_REPOSITORY_URL" ]]; then
                echo "CIRCLE_REPOSITORY_URL must be provided in environment" 1>&2
                exit 1
            fi
            echo "This is on $CIRCLE_REPOSITORY_URL."
            . venv/bin/activate
            pip freeze

      - save_cache:
          name: "[no-extra] Save cache"
          paths:
            - ./venv
          key: v5-dependencies-main-{{ checksum "requirements/main.txt"}}

      - run:
          name: "[no-extra] Run basic tests (checking dependencies)"
          command: |
            . venv/bin/activate
            python -m nevergrad.optimization.requirements_check  # calls a bit of everything

      - ubuntu_restore_all

      - save_cache:
          # only this one saves cache to avoid race conditions
          name: "[all] Save cache"
          paths:
            - ./venv
          key: v5-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/main.txt"}}-{{ checksum "requirements/bench.txt"}}

      - run:
          name: "[all] Print installation"
          when: always
          command: |
            . venv/bin/activate
            pip freeze

      - run:
          name: "Run wheel and check package"
          when: always
          command: |
            . venv/bin/activate
            rm -rf dist  # make sure it's clean
            python setup.py sdist bdist_wheel
            mkdir nevergrad-build
            mv dist nevergrad-build/
            #
            python -c "from pathlib import Path;files = Path('nevergrad.egg-info/SOURCES.txt').read_text().split(); assert 'LICENSE' in files"
            python3 -m venv test_wheel
            . test_wheel/bin/activate
            cd ..  # don't use nevergrad locally
            pip install repo/nevergrad-build/dist/nevergrad-*any.whl
            python -c "from nevergrad import functions;f = functions.ArtificialFunction(name='sphere', block_dimension=2);f([2, 3])"

      - persist_to_workspace:
          root: nevergrad-build
          paths: dist

      - run:
          name: Build docs
          command: |
            . venv/bin/activate
            cd docs/
            make html
            make linkcheck

      - persist_to_workspace:
          root: docs/_build
          paths: html

  static:
    executor: ubuntu-python37

    steps:

      - ubuntu_restore_all

      - run:
          name: "Run mypy"
          command: |
            . venv/bin/activate
            mypy --version
            mypy nevergrad

      - run:
          name: "Run basic pylint"
          command: |
            . venv/bin/activate
            pylint --version
            pylint nevergrad --disable=all --enable=unused-import,unused-argument,unused-variable,undefined-loop-variable,redefined-builtin,used-before-assignment,super-init-not-called


  pytests:
    executor: ubuntu-python37

    steps:

      - ubuntu_restore_all

      - run:
          name: "[all] Run pytest"
          when: always
          command: |
            . venv/bin/activate
            pytest nevergrad -v --exitfirst --durations=20 --cov=nevergrad


  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "56:6e:1b:3b:57:c1:1e:7b:5a:cc:3d:bf:c3:1f:d2:48"

      - attach_workspace:
          at: docs/_build

      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build"
            git config user.name "ci-build"

      - run:
          name: Deploy docs to gh-pages branch
          command: |
            echo "This is on $CIRCLE_REPOSITORY_URL."
            if [[ "$CIRCLE_REPOSITORY_URL" == *":facebookresearch/"* ]]; then
              echo "Deploying"
              gh-pages --dotfiles --message "[skip ci] Updates" --dist docs/_build/html
            fi


  windows-pytests:
    executor:
      name: win/default
      shell: bash.exe

    steps:

      - checkout

      - restore_cache:
          name: "[all] Restore cache"
          keys:
          - v5-win-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/main.txt"}}-{{ checksum "requirements/bench.txt"}}

      - run:
          name: Setup nevergrad in virtualenv
          command: |
            py -3 -m venv venv
            . ./venv/Scripts/activate
            pip install -U pip
            pip install torch==1.4.0+cpu torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
            pip install .[all]

      - save_cache:
          name: "[all] Save cache"
          paths:
            - ./venv
          key: v5-win-dependencies-{{ checksum "requirements/dev.txt" }}-{{ checksum "requirements/main.txt"}}-{{ checksum "requirements/bench.txt"}}

      - run:
          name: pytest
          command: |
            . ./venv/Scripts/activate
            pytest nevergrad -v --exitfirst


  pypi-deploy:
    docker:
      - image: python:3.6
    steps:

      - ubuntu_restore_all

      - attach_workspace:
          at: nevergrad-build

      - run:
          name: Create .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = jrapin" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: Verify tag
          command: |
            python setup.py verify_circleci_version

      - run:
          name: upload to pypi
          command: |
            echo "This is on $CIRCLE_REPOSITORY_URL."
            if [[ "$CIRCLE_REPOSITORY_URL" == *":facebookresearch/"* ]]; then
              echo "Deploying"
              . venv/bin/activate
              du -h nevergrad-build/dist/*
              twine check nevergrad-build/dist/nevergrad-*
              twine upload nevergrad-build/dist/nevergrad-* --verbose
            fi


workflows:
  version: 2
  all_ci:
    jobs:
      - install:
          filters:
            tags:
              only: /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.post(0|[1-9][0-9]*))?/
      - static:
          filters:
            tags:
              only: /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.post(0|[1-9][0-9]*))?/
      - pytests:
          filters:
            tags:
              only: /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.post(0|[1-9][0-9]*))?/
      - windows-pytests
      - docs-deploy:
          requires:
            - install
          filters:
            branches:
              only: master
            tags:
              only: /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.post(0|[1-9][0-9]*))?/
      - pypi-deploy:
          requires:
            - install
            - static
            - pytests
          filters:
            tags:
              only: /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.post(0|[1-9][0-9]*))?/
            branches:
              ignore: /.*/
