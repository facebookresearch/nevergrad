import numpy as np


class AdaptiveDynamicExplorationExploitationAlgorithmV3:
    def __init__(self, budget=10000):
        self.budget = budget
        self.dim = 5
        self.lb = -5.0
        self.ub = 5.0

        # Parameters
        self.initial_population_size = 100
        self.elite_ratio = 0.1
        self.local_search_chance = 0.2
        self.crossover_probability = 0.9
        self.mutation_factor = 0.8

        self.diversity_threshold = 0.2
        self.reinitialization_rate = 0.1
        self.diversity_cycle = 50
        self.local_search_intensity = 5
        self.global_search_intensity = 10

        # Enhanced parameters
        self.local_search_radius = 0.1
        self.global_search_radius = 0.5
        self.reduction_factor = 0.98
        self.mutation_scale = 0.1
        self.adaptive_crossover_rate = 0.5
        self.mutation_adjustment_factor = 0.1

        # Further enhancements
        self.exploration_factor = 1.5
        self.exploitation_factor = 0.5
        self.dynamic_adjustment_interval = 20
        self.search_balance = 0.5  # Controls the balance between exploration and exploitation

    def __call__(self, func):
        # Initialize population
        population = np.random.uniform(self.lb, self.ub, (self.initial_population_size, self.dim))
        fitness = np.array([func(ind) for ind in population])

        self.f_opt = np.min(fitness)
        self.x_opt = population[np.argmin(fitness)]

        evaluations = self.initial_population_size
        diversity_counter = 0

        while evaluations < self.budget:
            # Sort population based on fitness
            sorted_indices = np.argsort(fitness)
            elite_size = int(self.elite_ratio * len(population))
            elite_population = population[sorted_indices[:elite_size]]

            new_population = []
            for i in range(len(population)):
                if np.random.rand() < self.local_search_chance:
                    candidate = self.local_search(population[i], func)
                else:
                    # Differential Evolution mutation and crossover
                    idxs = np.random.choice(len(population), 3, replace=False)
                    a, b, c = population[idxs]
                    mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)

                    crossover = np.random.rand(self.dim) < self.crossover_probability
                    candidate = np.where(crossover, mutant, population[i])

                # Selection
                f_candidate = func(candidate)
                evaluations += 1
                if f_candidate < fitness[i]:
                    new_population.append(candidate)
                    if f_candidate < self.f_opt:
                        self.f_opt = f_candidate
                        self.x_opt = candidate
                else:
                    new_population.append(population[i])

                if evaluations >= self.budget:
                    break

            population = np.array(new_population)
            fitness = np.array([func(ind) for ind in population])

            # Add elite back to population
            population = np.vstack((population, elite_population))
            elite_fitness = np.array([func(ind) for ind in elite_population])
            fitness = np.hstack((fitness, elite_fitness))
            evaluations += elite_size

            # Adaptive control of parameters based on population diversity
            diversity_counter += 1
            if diversity_counter % self.dynamic_adjustment_interval == 0:
                self.adaptive_population_control(population, fitness, evaluations)

        return self.f_opt, self.x_opt

    def local_search(self, x, func):
        best_x = x.copy()
        best_f = func(x)

        for _ in range(self.local_search_intensity):
            step_size = np.random.normal(0, self.local_search_radius, size=self.dim)
            x_new = np.clip(best_x + step_size, self.lb, self.ub)
            f_new = func(x_new)

            if f_new < best_f:
                best_x = x_new
                best_f = f_new

        return best_x

    def adaptive_population_control(self, population, fitness, evaluations):
        diversity = np.mean(np.std(population, axis=0))

        if diversity < self.diversity_threshold:
            num_reinit = int(self.reinitialization_rate * len(population))
            reinit_indices = np.random.choice(len(population), num_reinit, replace=False)

            for idx in reinit_indices:
                population[idx] = np.random.uniform(self.lb, self.ub, self.dim)

        remaining_budget_ratio = (self.budget - evaluations) / self.budget
        self.local_search_chance = max(0.1, self.local_search_chance * remaining_budget_ratio)
        self.crossover_probability = self.crossover_probability * (
            1 + self.search_balance * remaining_budget_ratio
        )
        self.mutation_factor = self.mutation_factor * (1 + self.search_balance * remaining_budget_ratio)

        # Enhanced adaptation strategies
        self.crossover_probability *= self.adaptive_crossover_rate
        self.mutation_factor *= self.reduction_factor
        self.local_search_radius *= self.reduction_factor

        if diversity < self.diversity_threshold / 2 and remaining_budget_ratio > 0.5:
            self.global_search_reset(population, fitness, evaluations)

        # Dynamic mutation adjustment
        if evaluations % self.dynamic_adjustment_interval == 0:
            best_fitness = np.min(fitness)
            if best_fitness < self.f_opt:
                self.mutation_factor *= 1 - self.mutation_adjustment_factor
                self.local_search_radius *= 1 - self.mutation_adjustment_factor
            else:
                self.mutation_factor *= 1 + self.mutation_adjustment_factor
                self.local_search_radius *= 1 + self.mutation_adjustment_factor

    def global_search_reset(self, population, fitness, evaluations):
        global_search_population = np.random.uniform(
            self.lb, self.ub, (self.global_search_intensity, self.dim)
        )

        for ind in global_search_population:
            f_ind = func(ind)
            evaluations += 1
            if f_ind < self.f_opt:
                self.f_opt = f_ind
                self.x_opt = ind

        for i in range(self.global_search_intensity):
            population[i] = global_search_population[i]
