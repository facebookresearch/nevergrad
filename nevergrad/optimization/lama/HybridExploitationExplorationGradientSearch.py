import numpy as np


class HybridExploitationExplorationGradientSearch:
    def __init__(self, budget):
        self.budget = budget
        self.dimension = 5  # Dimensionality of the BBOB test suite
        self.lower_bound = -5.0
        self.upper_bound = 5.0

    def __call__(self, func):
        self.f_opt = np.inf
        self.x_opt = None

        # Population initialization
        population_size = 20
        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dimension))
        fitness = np.array([func(x) for x in population])

        # Momentum for gradient
        momentum = np.zeros((population_size, self.dimension))
        gamma = 0.9  # momentum coefficient

        iteration = 0
        while iteration < self.budget:
            best_idx = np.argmin(fitness)
            best_individual = population[best_idx]

            if fitness[best_idx] < self.f_opt:
                self.f_opt = fitness[best_idx]
                self.x_opt = best_individual

            # Gradient estimation with momentum
            gradients = np.zeros_like(population)
            for i in range(population_size):
                for d in range(self.dimension):
                    perturb = np.zeros(self.dimension)
                    epsilon = 0.01
                    perturb[d] = epsilon

                    forward = np.clip(population[i] + perturb, self.lower_bound, self.upper_bound)
                    backward = np.clip(population[i] - perturb, self.lower_bound, self.upper_bound)
                    gradient = (func(forward) - func(backward)) / (2 * epsilon)

                    gradients[i][d] = gradient

                # Apply momentum to gradients
                momentum[i] = gamma * momentum[i] + (1 - gamma) * gradients[i]
                new_position = population[i] - momentum[i] * 0.1  # 0.1 is the learning rate
                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)

                # Evaluate new position
                new_fitness = func(new_position)
                if new_fitness < fitness[i]:
                    population[i] = new_position
                    fitness[i] = new_fitness

            iteration += population_size

        return self.f_opt, self.x_opt
